<?xml version='1.0' encoding='UTF-8'?>
<!--
  ~ Copyright (c) 2008-2013, Hazelcast, Inc. All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<sect1 xml:id="WhatsNew3" version='5.0' xmlns='http://docbook.org/ns/docbook'
       xmlns:xlink="http://www.w3.org/1999/xlink"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
      http://www.w3.org/1999/xlink http://www.w3.org/1999/xlink.xsd">
    <title>What's new in 3.0?</title>
    <para>
        <emphasis role="bold">Core architecture:</emphasis>
        <itemizedlist>
            <listitem>
                <para>Multithread execution</para>: Multiple thread handling the operations on Node.
                With Hazelcast 2, there was a single thread.
            </listitem>
            <listitem>
                <para><link xlink:href="SPI"> SPI </link> </para>: Service Programming Interface for developing new partitioned services, data structures.
                All Hazelcast data structures like Map, Queue are reimplemented with SPI.
            </listitem>
        </itemizedlist>
    </para>

    <para>
        <emphasis role="bold">Serialization</emphasis>
        <itemizedlist>
            <listitem>
                <para><link xlink:href="#DataSerializable"> IdentifiedDataSerializable </link></para>:
                A slightly optimized version of DataSerializable that doesn't
                use class name and reflection for de-serialization.
            </listitem>
            <listitem>
                <para><link xlink:href="#PortableSerialization"> Portable Serialization </link></para>:
                Another Serialization interface that doesn't use reflection and
                can navigate through binary data and fetch/query/index individual field without having any reflection
                or whole object de-serialization.
            </listitem>
            <listitem>
                <para><link xlink:href="#CustomSerialization"> Custom Serialization </link></para>:
                Support for custom serialization that can be plugged into Hazelcast.
            </listitem>
            <listitem>
                <para>Support for multi-version</para>: Support for multiple versions of the same Portable object.
            </listitem>
        </itemizedlist>
    </para>
    <para>
        <emphasis role="bold">Map</emphasis>
        <itemizedlist>
            <listitem>
                <para><link xlink:href="#MapEntryProcessor">Entry Processor</link></para> :
                Executing an EntryProcessor on the key or on all entries. Hazelcast
                implicitly locks the entree and guarantees no migration while the execution of the Processor.
            </listitem>
            <listitem>
                <para>Storage Stype</para> : Support for storing entries in Binary, Object and Cached format.
            </listitem>
            <listitem>
                <para>Continuous Query</para> : Support for listeners that register with a query and are notified when
                there is a change on the Map that matches the Query.
            </listitem>
            <listitem>
                <para><link xlink:href="#MapInterceptor"> Interceptors </link></para> :
                Ability to intercept the Map operation before/after it is actually executed.
            </listitem>
            <listitem>
                <para><link xlink:href="#MapIndex"> Lazy Indexing </link></para> :Ability to index existing items in the map. No need to add
                indexes at the very beginning.
            </listitem>
        </itemizedlist>
    </para>
    <para>
        <emphasis role="bold">Queue</emphasis>
        <itemizedlist>
            <listitem>
                <para>No more dependency on the distributed map</para>
            </listitem>
            <listitem>
                <para>Scales really well as you have thousands of separate queues.</para>
            </listitem>
            <listitem>
                <para>Persistence</para>: Support for persistence with QueueStore.
            </listitem>
        </itemizedlist>
    </para>
    <para>
        <emphasis role="bold">Multimap</emphasis>
        <itemizedlist>
            <listitem>
                <para>Values can be Set/List/Queue.</para>
            </listitem>
        </itemizedlist>
    </para>
    <para>
        <emphasis role="bold">Topic</emphasis>
        <itemizedlist>
            <listitem>
                <para>Total Ordering</para> : Support for global ordering where all Nodes receive all messages in the same order.
            </listitem>
        </itemizedlist>
    </para>
    <para>
        <emphasis role="bold">Transactions</emphasis>
        <itemizedlist>
            <listitem>
                <para><link xlink:href="TransactionInterface"> XA Transaction</link></para>: Support for both 1-phase (local) and 2 phase transactions
            </listitem>
        </itemizedlist>
    </para>
    <para>
        <emphasis role="bold">Client</emphasis>
        <itemizedlist>
            <listitem>
                <para>New Binary Protocol</para>: A new binary protocol based on portable serialization.
                The same protocol is used for Java/C/C# and other client
            </listitem>
            <listitem>
                <para>Smart client</para>: Support for dummy and smart client.
                Where a dummy client will maintain a connection to only one member, whereas the smart
                client can route the operations to the Node that owns the data.
            </listitem>
        </itemizedlist>
    </para>
</sect1>
