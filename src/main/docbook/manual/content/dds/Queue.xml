<?xml version='1.0' encoding='UTF-8'?>
<!--
  ~ Copyright (c) 2008-2013, Hazelcast, Inc. All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<sect1 xml:id="Queue" version='5.0' xmlns='http://docbook.org/ns/docbook'
       xmlns:xi="http://www.w3.org/2001/XInclude"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd">
    <title>Distributed Queue</title>
    <para>Hazelcast distributed queue is an implementation
        of<literal>java.util.concurrent.BlockingQueue</literal>.
        <programlisting language="java"><![CDATA[import com.hazelcast.core.Hazelcast;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.TimeUnit;
import com.hazelcast.config.Config;

Config cfg = new Config();
HazelcastInstance hz = Hazelcast.newHazelcastInstance(cfg);
BlockingQueue<MyTask> q = hz.getQueue("tasks");
q.put(new MyTask());
MyTask task = q.take();

boolean offered = q.offer(new MyTask(), 10, TimeUnit.SECONDS);
task = q.poll (5, TimeUnit.SECONDS);
if (task != null) {
    //process task
}
]]></programlisting>
        FIFO ordering will apply to all queue operations cluster-wide. User objects (such
        as
        <literal>MyTask</literal>
        in the example above), that are (en/de)queued have to
        be <literal>Serializable</literal>.
        By configuring max-size for queue one can obtain a bounded queue.

    </para>

    <para>
        Sample configuration:
        <programlisting language="xml"><![CDATA[<hazelcast>
    ...
    <queue name="tasks">
        <!--
            Maximum size of the queue. When queue size reaches the maximum,
            all put operations will get blocked until the queue size
            goes down below the maximum.
            Any integer between 0 and Integer.MAX_VALUE. 0 means Integer.MAX_VALUE. Default is 0.
        -->
        <max-size>10000</max-size>

        <!--
        Number of backups. If 1 is set as the backup-count for example,
        then all entries of the map will be copied to another JVM for
        fail-safety. Valid numbers are 0 (no backup), 1, 2 ... 6.
        Dfault is 1.
        -->
        <backup-count>0</backup-count>
    </queue>


</hazelcast>
]]></programlisting>
    </para>
    <sect2>
        <title>Persistence</title>
        <para>Hazelcast allows you to load and store the distributed queue entries from/to a
            persistent datastore such as relational database.
        </para>
        <!-- TODO more explanation -->
    </sect2>
    <xi:include href="../WildcardConfigurationLink.xml"/>
</sect1>
