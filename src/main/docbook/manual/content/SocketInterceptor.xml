<?xml version='1.0' encoding='UTF-8'?>

<sect2 xml:id="SocketInterceptor" version='5.0' xmlns='http://docbook.org/ns/docbook' xmlns:xlink="http://www.w3.org/1999/xlink">
<title>Socket Interceptor</title>
<para>
    Hazelcast allows you to intercept socket connections before a node joins to cluster or a client connects to a node.
    This provides ability to add custom hooks to join/connection procedure (like identity checking using Kerberos, etc.).
    You should implement <code>com.hazelcast.nio.MemberSocketInterceptor</code> for members and
    <code>com.hazelcast.nio.SocketInterceptor</code> for clients.

    <programlisting language="java"><![CDATA[
public class MySocketInterceptor implements MemberSocketInterceptor {
    public void init(SocketInterceptorConfig socketInterceptorConfig) {
        // initialize interceptor
    }

    void onConnect(Socket connectedSocket) throws IOException {
        // do something meaningful when connected
    }

    public void onAccept(Socket acceptedSocket) throws IOException {
        // do something meaningful when accepted a connection
    }
}
]]></programlisting>

    <programlisting language="xml"><![CDATA[<hazelcast>
    ...
    <network>
        ...
       <socket-interceptor enabled="true">
           <class-name>com.hazelcast.examples.MySocketInterceptor</class-name>
           <properties>
                <property name="kerberos-host">kerb-host-name</property>
                <property name="kerberos-config-file">kerb.conf</property>
           </properties>
       </socket-interceptor>
    </network>
    ...
</hazelcast>
]]></programlisting>


<programlisting language="java"><![CDATA[

public class MyClientSocketInterceptor implements SocketInterceptor {
    void onConnect(Socket connectedSocket) throws IOException {
        // do something meaningful when connected
    }
}

ClientConfig clientConfig = new ClientConfig();
clientConfig.setGroupConfig(new GroupConfig("dev","dev-pass")).addAddress("10.10.3.4");

MyClientSocketInterceptor myClientSocketInterceptor = new MyClientSocketInterceptor();
clientConfig.setSocketInterceptor(myClientSocketInterceptor);
HazelcastInstance client = HazelcastClient.newHazelcastClient(clientConfig);
]]></programlisting>

</para>
</sect2>