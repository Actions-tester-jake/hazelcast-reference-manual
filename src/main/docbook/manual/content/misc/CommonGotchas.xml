<?xml version='1.0' encoding='UTF-8'?>
<!--
  ~ Copyright (c) 2008-2012, Hazel Bilisim Ltd. All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<sect1 xml:id="CommonGotchas" version='5.0' xmlns='http://docbook.org/ns/docbook'
        >
    <title>Common Gotchas</title>
    <para>Hazelcast is the distributed implementation of several structures that exist in Java.
        Most of the time it behaves as you expect. However there are some design choices in
        Hazelcast that violate some contracts. This page will list those violations.
        <orderedlist>
            <listitem>
                <para>
                    <emphasis role="bold">equals() and hashCode() methods for the objects stored
                        in Hazelcast
                    </emphasis>
                </para>
                <para>When you store a key, value in a distributed Map, Hazelcast serializes the key
                    and value and stores the byte array version of them in local ConcurrentHashMaps.
                    And this ConcurrentHashMap uses the equals and hashCode methods of byte array
                    version of your key. So it does not take into account the actual equals and
                    hashCode implementations of your objects. So it is important that you choose
                    your keys in a proper way. Implementing the equals and hashCode is not enough,
                    it is also important that the object is always serialized into the same byte
                    array. All primitive types, like; String, Long, Integer and etc. are good
                    candidates for keys to use in Hazelcast. An unsorted Set is an example of a very
                    bad candidate because Java Serialization may serialize the same unsorted set in
                    two different byte arrays.
                </para>
                <para>Note that the distributed Set and List stores its entries as the keys in a
                    distributed Map. So the notes above apply to the objects you store in Set and
                    List.
                </para>
            </listitem>
        </orderedlist>
    </para>
</sect1>
