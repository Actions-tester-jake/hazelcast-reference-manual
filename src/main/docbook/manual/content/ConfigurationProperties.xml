<?xml version="1.0" encoding="UTF-8"?>
<sect1 id="ConfigurationProperties" version="5.0"
	xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns5="http://www.w3.org/2000/svg"
	xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml"
	xmlns:db="http://docbook.org/ns/docbook">
	<title>Advanced Configuration Properties</title>
	<para>
		There are some advanced configuration properties to tune some aspects
		of Hazelcast. These can be set as property name and value pairs
		through configuration xml, configuration API or JVM system property.
		<itemizedlist>
			<listitem>
				<para><emphasis role="bold">Configuration xml</emphasis></para>
				<para>
					<programlisting language="java">
&lt;hazelcast xsi:schemaLocation="http://www.hazelcast.com/schema/config hazelcast-basic.xsd"
	xmlns="http://www.hazelcast.com/schema/config"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt; 
	
	....
		
	&lt;properties&gt;
		&lt;property name="hazelcast.property.foo"&gt;value&lt;/property&gt; 
		....
	&lt;/properties&gt;
&lt;/hazelcast&gt;</programlisting>
				</para>
			</listitem>
			<listitem>
				<para><emphasis role="bold">Configuration API</emphasis></para>
				<para>
					<programlisting language="java">
Config cfg = ... ;
cfg.setProperty("hazelcast.property.foo", "value");
					</programlisting>
				</para>
			</listitem>
			<listitem>
				<para><emphasis role="bold">System Property</emphasis></para>
				<para>
					<orderedlist>
						<listitem>
							Using JVM parameter:
							<literal>java -Dhazelcast.property.foo=value</literal>
						</listitem>
						<listitem>
							Using System class:
							<literal>System.setProperty("hazelcast.property.foo", "value");
							</literal>
						</listitem>
					</orderedlist>
				</para>
			</listitem>
		</itemizedlist>
		<table>
			<tgroup cols="4">
				<colspec align="left" />
				<thead>
					<row>
						<entry>Property Name</entry>
						<entry>Description</entry>
						<entry>Value Type</entry>
						<entry>Default</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>
							<literal>hazelcast.mancenter.enabled</literal>
						</entry>
						<entry>
							Enable
							<ulink url="http://www.hazelcast.com/mancenter.jsp">Hazelcast Management Center</ulink>
							service
						</entry>
						<entry>boolean</entry>
						<entry>true</entry>
					</row>
					<row>
						<entry>
							<literal>hazelcast.memcache.enabled</literal>
						</entry>
						<entry>
							Enable
							<ulink url="http://code.google.com/p/hazelcast/wiki/MemcacheClient">Memcache</ulink>
							client request listener service
						</entry>
						<entry>boolean</entry>
						<entry>true</entry>
					</row>
					<row>
						<entry>
							<literal>hazelcast.rest.enabled</literal>
						</entry>
						<entry>
							Enable
							<ulink url="http://code.google.com/p/hazelcast/wiki/RestClient">REST</ulink>
							client request listener service
						</entry>
						<entry>boolean</entry>
						<entry>true</entry>
					</row>
					<row>
						<entry>
							<literal>hazelcast.map.load.chunk.size</literal>
						</entry>
						<entry>
							Chunk size for
							<ulink url="http://code.google.com/p/hazelcast/wiki/MapPersistence">MapLoader</ulink>
							's map initialization process (MapLoder
							<ulink url="http://code.google.com/p/hazelcast/w/edit/MapLoder">?</ulink>
							.loadAllKeys())
						</entry>
						<entry>integer</entry>
						<entry>1000</entry>
					</row>
					<row>
						<entry>
							<literal>hazelcast.in.thread.priority</literal>
						</entry>
						<entry>
							Hazelcast
							<ulink url="http://code.google.com/p/hazelcast/wiki/InternalsThreads">Input Thread</ulink>
							priority
						</entry>
						<entry>integer</entry>
						<entry>7</entry>
					</row>
					<row>
						<entry>
							<literal>hazelcast.out.thread.priority</literal>
						</entry>
						<entry>
							Hazelcast
							<ulink url="http://code.google.com/p/hazelcast/wiki/InternalsThreads">Output Thread</ulink>
							priority
						</entry>
						<entry>integer</entry>
						<entry>7</entry>
					</row>
					<row>
						<entry>
							<literal>hazelcast.service.thread.priority</literal>
						</entry>
						<entry>
							Hazelcast
							<ulink url="http://code.google.com/p/hazelcast/wiki/InternalsThreads">Service Thread</ulink>
							priority
						</entry>
						<entry>integer</entry>
						<entry>8</entry>
					</row>
					<row>
						<entry>
							<literal>hazelcast.merge.first.run.delay.seconds</literal>
						</entry>
						<entry>
							Inital run delay of
							<ulink
								url="http://code.google.com/p/hazelcast/wiki/NetworkPartitioning">split brain/merge process</ulink>
							in seconds
						</entry>
						<entry>integer</entry>
						<entry>300</entry>
					</row>
					<row>
						<entry>
							<literal>hazelcast.merge.next.run.delay.seconds</literal>
						</entry>
						<entry>
							Run interval of
							<ulink
								url="http://code.google.com/p/hazelcast/wiki/NetworkPartitioning">split brain/merge process</ulink>
							in seconds
						</entry>
						<entry>integer</entry>
						<entry>120</entry>
					</row>
					<row>
						<entry>
							<literal>hazelcast.redo.wait.millis</literal>
						</entry>
						<entry>Wait time before a redo operation in milliseconds</entry>
						<entry>integer</entry>
						<entry>500</entry>
					</row>
					<row>
						<entry>
							<literal>hazelcast.socket.bind.any</literal>
						</entry>
						<entry>Bind node socket address to any local address</entry>
						<entry>boolean</entry>
						<entry>true</entry>
					</row>
					<row>
						<entry>
							<literal>hazelcast.socket.receive.buffer.size</literal>
						</entry>
						<entry>Socket receive buffer size in KB</entry>
						<entry>integer</entry>
						<entry>32</entry>
					</row>
					<row>
						<entry>
							<literal>hazelcast.socket.send.buffer.size</literal>
						</entry>
						<entry>Socket send buffer size in KB</entry>
						<entry>integer</entry>
						<entry>32</entry>
					</row>
					<row>
						<entry>
							<literal>hazelcast.socket.keep.alive</literal>
						</entry>
						<entry>Socket set keep alive</entry>
						<entry>boolean</entry>
						<entry>true</entry>
					</row>
					<row>
						<entry>
							<literal>hazelcast.socket.no.delay</literal>
						</entry>
						<entry>Socket set TCP no delay</entry>
						<entry>boolean</entry>
						<entry>true</entry>
					</row>
					<row>
						<entry>
							<literal>hazelcast.shutdownhook.enabled</literal>
						</entry>
						<entry>Enable Hazelcast shutdownhook thread</entry>
						<entry>boolean</entry>
						<entry>true</entry>
					</row>
					<row>
						<entry>
							<literal>hazelcast.wait.seconds.before.join</literal>
						</entry>
						<entry>Wait time before join operation</entry>
						<entry>integer</entry>
						<entry>5</entry>
					</row>
					<row>
						<entry>
							<literal>hazelcast.heartbeat.interval.seconds</literal>
						</entry>
						<entry>Heartbeat send interval in seconds</entry>
						<entry>integer</entry>
						<entry>1</entry>
					</row>
					<row>
						<entry>
							<literal>hazelcast.max.no.heartbeat.seconds</literal>
						</entry>
						<entry>Max timeout of heartbeat in seconds for a node to assume it
							is dead</entry>
						<entry>integer</entry>
						<entry>300</entry>
					</row>
					<row>
						<entry>
							<literal>hazelcast.icmp.enabled</literal>
						</entry>
						<entry>Enable ICMP ping</entry>
						<entry>boolean</entry>
						<entry>false</entry>
					</row>
					<row>
						<entry>
							<literal>hazelcast.initial.min.cluster.size</literal>
						</entry>
						<entry>Initial expected cluster size to wait before node to start
							completely</entry>
						<entry>integer</entry>
						<entry>0</entry>
					</row>
					<row>
						<entry>
							<literal>hazelcast.initial.wait.seconds</literal>
						</entry>
						<entry>Inital time in seconds to wait before node to start
							completely</entry>
						<entry>integer</entry>
						<entry>0</entry>
					</row>
					<row>
						<entry>
							<literal>hazelcast.restart.on.max.idle</literal>
						</entry>
						<entry>
							Restart node if service thread blocked for
							<literal>hazelcast.max.no.heartbeat.seconds</literal>
						</entry>
						<entry>boolean</entry>
						<entry>false</entry>
					</row>
					<row>
						<entry>
							<literal>hazelcast.map.partition.count</literal>
						</entry>
						<entry>Distributed map partition count</entry>
						<entry>integer</entry>
						<entry>271</entry>
					</row>
					<row>
						<entry>
							<literal>hazelcast.map.remove.delay.seconds</literal>
						</entry>
						<entry>Remove delay time in seconds for dirty records</entry>
						<entry>integer</entry>
						<entry>5</entry>
					</row>
					<row>
						<entry>
							<literal>hazelcast.map.cleanup.delay.seconds</literal>
						</entry>
						<entry>Cleanup process delay time in seconds</entry>
						<entry>integer</entry>
						<entry>10</entry>
					</row>
					<row>
						<entry>
							<literal>hazelcast.executor.query.thread.count</literal>
						</entry>
						<entry>Query executor service max thread count</entry>
						<entry>integer</entry>
						<entry>8</entry>
					</row>
					<row>
						<entry>
							<literal>hazelcast.executor.event.thread.count</literal>
						</entry>
						<entry>Event executor service max thread count</entry>
						<entry>integer</entry>
						<entry>16</entry>
					</row>
					<row>
						<entry>
							<literal>hazelcast.executor.migration.thread.count</literal>
						</entry>
						<entry>Migration executor service max thread count</entry>
						<entry>integer</entry>
						<entry>20</entry>
					</row>
					<row>
						<entry>
							<literal>hazelcast.executor.client.thread.count</literal>
						</entry>
						<entry>Client executor service max thread count</entry>
						<entry>integer</entry>
						<entry>40</entry>
					</row>
					<row>
						<entry>
							<literal>hazelcast.executor.store.thread.count</literal>
						</entry>
						<entry>Map store executor service max thread count</entry>
						<entry>integer</entry>
						<entry>16</entry>
					</row>
					<row>
						<entry>
							<literal>hazelcast.log.state</literal>
						</entry>
						<entry>Log cluster debug state periodically</entry>
						<entry>boolean</entry>
						<entry>false</entry>
					</row>
					<row>
						<entry>
							<literal>hazelcast.jmx</literal>
						</entry>
						<entry>
							Enable
							<ulink url="http://code.google.com/p/hazelcast/wiki/JMX">JMX</ulink>
							agent
						</entry>
						<entry>boolean</entry>
						<entry>false</entry>
					</row>
					<row>
						<entry>
							<literal>hazelcast.jmx.detailed</literal>
						</entry>
						<entry>
							Enable detailed views on
							<ulink url="http://code.google.com/p/hazelcast/wiki/JMX">JMX</ulink>
						</entry>
						<entry>boolean</entry>
						<entry>false</entry>
					</row>
					<row>
						<entry>
							<literal>hazelcast.mc.map.excludes</literal>
						</entry>
						<entry>
							Comma seperated map names to exclude from
							<ulink url="http://www.hazelcast.com/mancenter.jsp">Hazelcast Management Center</ulink>
						</entry>
						<entry>CSV</entry>
						<entry>null</entry>
					</row>
					<row>
						<entry>
							<literal>hazelcast.mc.queue.excludes</literal>
						</entry>
						<entry>
							Comma seperated queue names to exclude from
							<ulink url="http://www.hazelcast.com/mancenter.jsp">Hazelcast Management Center</ulink>
						</entry>
						<entry>CSV</entry>
						<entry>null</entry>
					</row>
					<row>
						<entry>
							<literal>hazelcast.mc.topic.excludes</literal>
						</entry>
						<entry>
							Comma seperated topic names to exclude from
							<ulink url="http://www.hazelcast.com/mancenter.jsp">Hazelcast Management Center</ulink>
						</entry>
						<entry>CSV</entry>
						<entry>null</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
	</para>
</sect1>
